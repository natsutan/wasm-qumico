/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
eval("\r\nconst video  = document.querySelector(\"#camera\");\r\nconst canvas = document.querySelector(\"#picture\").getContext(\"2d\");\r\nconst canvas_ret = document.querySelector(\"#result\").getContext(\"2d\");\r\nvar img_dog = new Image();\r\nvar img_cat = new Image();\r\n\r\n/**\r\n * Returns a valid importObj.env object with default values to pass\r\n * into the WebAssembly.Instance constructor for Emscripten's\r\n * Wasm module.\r\n */\r\n const getDefaultEnv = () => ({\r\n  memoryBase: 0,\r\n  tableBase: 0,\r\n  memory: new WebAssembly.Memory({ initial: 256 }),\r\n  table: new WebAssembly.Table({ initial: 2, element: 'anyfunc' }),\r\n  abort: console.log\r\n});\r\n\r\n/**\r\n * Returns a WebAssembly.Instance instance compiled from the specified\r\n * .wasm file.\r\n */\r\nfunction loadWasm(fileName, importObj = { env: {} }) {\r\n  // Override any default env values with the passed in importObj.env\r\n  // values:\r\n  const allEnv = Object.assign({}, getDefaultEnv(), importObj.env);\r\n\r\n  // Ensure the importObj object includes the valid env value:\r\n  const allImports = Object.assign({}, importObj, { env: allEnv });\r\n\r\n  // Return the result of instantiating the module (instance and module):\r\n\r\n  var importObject = { wasi_snapshot_preview1: { proc_exit: arg => console.log(arg) } };\r\n//  return WebAssembly.instantiateStreaming(\r\n//    fetch(fileName), importObject\r\n//  ).then(obj => document.getElementById(\"output\").value = obj.instance.exports.main());\r\n\r\n  return fetch(fileName)\r\n    .then(response => {\r\n      if (response.ok) return response.arrayBuffer();\r\n      throw new Error(`Unable to fetch WebAssembly file ${fileName}`);\r\n    })\r\n  //    .then(bytes => WebAssembly.instantiate(bytes, allImports));\r\n    .then(bytes => WebAssembly.instantiate(bytes, importObject));\r\n}\r\n\r\n\r\nwindow.onload = () => {\r\n\r\n    img_dog.src = \"dog.png\"\r\n    img_cat.src = \"cat.png\"\r\n\r\n\r\n    /** カメラ設定 */\r\n    const constraints = {\r\n      audio: false, \r\n      video: {\r\n        width: 224,\r\n        height: 224,\r\n        facingMode: \"user\"   // フロントカメラを利用する\r\n      }\r\n    };\r\n  \r\n    /**\r\n     * カメラを<video>と同期\r\n     */\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n    .then( (stream) => {\r\n      video.srcObject = stream;\r\n      video.onloadedmetadata = (e) => {\r\n        video.play();\r\n      };\r\n    })\r\n    .catch( (err) => {\r\n      console.log(err.name + \": \" + err.message);\r\n    });\r\n    canvas.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    console.log(typeof(canvas_ret));\r\n\r\n    img_dog.onload = function() {\r\n      canvas_ret.drawImage(img_dog, 0, 0);\r\n      console.log(\"load img\");\r\n      console.log(typeof(img_dog));\r\n      }\r\n\r\n    \r\n    const wasm = loadWasm('ai.wasm')\r\n\r\n\r\n    var timer = function () {\r\n      qumico_ret = wasm.then(h => h.ai()).catch(console.error);\r\n      console.log(\"qumico_ret \" + qumico_ret);\r\n      if (qumico_ret == 0) {\r\n          canvas_ret.drawImage(img_dog, 0, 0);\r\n          console.log(\"dog\");\r\n      } else {\r\n          canvas_ret.drawImage(img_cat, 0, 0);\r\n          console.log(\"cat\");\r\n      }\r\n\r\n    }\r\n\r\n    setInterval(timer, 3000);\r\n\r\n    console.log(\"end of on load\");\r\n  };\r\n\r\n\n\n//# sourceURL=webpack://wasm-automl/./src/js/app.js?");
/******/ })()
;